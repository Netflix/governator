/*
 * Copyright 2015 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'org.ajoberstar.github-pages' version '1.4.2'
}

githubPages {
    repoUri = Grgit.open().remote.list().first().url
    deleteExistingFiles = false
    pages {
        final olderVersion = project.hasProperty('jDiff.olderVersion') ? project.getProperty('jDiff.olderVersion') : rootProject.version
        final newerVersion = project.hasProperty('jDiff.newerVersion') ? project.getProperty('jDiff.newerVersion') : rootProject.version

        from("${rootProject.buildDir}/reports/jDiff/${olderVersion}-to-${newerVersion}") {
            include('**')
            into("jDiff/${olderVersion}-to-${newerVersion}")
        }
        from("${rootProject.buildDir}/gh-pages/${rootProject.name}") {
            include('jdiff.js')
        }
    }
}

prepareGhPages.dependsOn('generateJDiffJs')

import org.ajoberstar.grgit.Grgit

subprojects {
    apply plugin: 'java'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    group = "com.netflix.governator"

    dependencies {
        testCompile 'org.slf4j:slf4j-log4j12:1.7.2'
    }
}

/**
 * Generate a JDiff report between a newer version and an older version.
 *
 * Usage:
 *  gradle -PjDiff.olderVersion=2.1312.0 [-PjDiff.newerVersion=2.1716.0] generateJDiffReport
 *
 * View generated report at:
 *  build/reports/jDiff/${olderVersion}-to-${newerVersion}/changes.html
 */
task generateJDiffReport(dependsOn: '_jDiff_cloneOldVersion') {
    description = "Generates a JDiff report"
    group = "Documentation"

    final jDiffHome = "${rootProject.rootDir}/buildSrc/lib/jdiff-1.1.1/"

    ant.taskdef(
        name: 'jDiff',
        classname: 'jdiff.JDiffAntTask',
        classpath: "${jDiffHome}/antjdiff.jar")

    doLast {
        final olderVersion = project.getProperty('jDiff.olderVersion')
        final olderVersionRoot = new File("${rootProject.buildDir}/jDiff/${rootProject.name}-${olderVersion}")

        if (olderVersion == null)
            throw new IllegalArgumentException(
                'Set `jDiff.olderVersion` property to indicate older of the two versions being compared')

        final newerVersion = project.hasProperty('jDiff.newerVersion') ? project.getProperty('jDiff.newerVersion') : rootProject.version
        final newerVersionRoot = rootProject.rootDir

        final outputDir = "${rootProject.buildDir}/reports/jDiff/${olderVersion}-to-${newerVersion}"
        mkdir(outputDir)

        ant.metaClass.jDiff_getSrcDirSets = { root ->
            root.eachDirMatch({ dir ->
                new File("${dir}/src/main/java").exists()
            }) { dir ->
                dirset(dir: "${dir}/src/main/java")
            }
        }

        ant.property(name: "JDIFF_HOME", value: jDiffHome)
        ant.jDiff(
            destdir: outputDir,
            verbose: 'off',
            stats: 'on',
            docchanges: 'off',
            source: '1.8') {
            old(name: "${rootProject.name}-${olderVersion}") {
                jDiff_getSrcDirSets(olderVersionRoot)
            }

            'new'(name: "${rootProject.name}-${newerVersion}") {
                jDiff_getSrcDirSets(newerVersionRoot)
            }
        }
    }
}

task jDiffJar(type: Jar) << {
    final olderVersion = project.getProperty('jDiff.olderVersion')
    final newerVersion = project.hasProperty('jDiff.newerVersion') ? project.getProperty('jDiff.newerVersion') : rootProject.version

    classifier = 'jdiff'
    extension = 'jar'
    destinationDir = file("${rootProject.buildDir}/libs")

    from "${rootProject.buildDir}/reports/jDiff/${olderVersion}-to-${newerVersion}/changes"
}

task _jDiff_cloneOldVersion << {
    final olderVersion = project.getProperty('jDiff.olderVersion')
    final olderVersionRoot = new File("${rootProject.buildDir}/jDiff/${rootProject.name}-${olderVersion}")

    final newerVersionRoot = rootProject.rootDir

    if (!olderVersionRoot.isDirectory()) {
        Grgit.clone(
            uri: "file://${newerVersionRoot.path}/.git",
            dir: olderVersionRoot.path,
            refToCheckout: "refs/tags/v${olderVersion}")
    }
}

task generateJDiffJs(dependsOn: ['_githubPages_cloneGhPages', 'generateJDiffReport']) << {
    final jdiffJs = new File("${rootProject.buildDir}/gh-pages/${rootProject.name}/jdiff.js")

    final indentation = '|        '
    final jDiffParents = [jdiffJs.parent, "${rootProject.buildDir}/reports"]
    final jDiffReports = jDiffParents.collect {
        new File(it, 'jDiff').listFiles()
    }.flatten().findAll {
        it?.isDirectory()
    }.collect {
        "${indentation}'${it.name}'"
    }.sort().unique().reverse().join(',\n')
    final jdiffJsContents = """
        |// This file was automatically generated by the `generateJDiffJs` Gradle task. Do not manually edit.
        |angular.module('Index', [])
        |  .controller('JDiff', ['\$scope', function (\$scope) {
        |    \$scope['j-diff-reports'] = [
                 ${jDiffReports}].map(function (jDiffReport) {
        |          return [jDiffReport.replace(/.*-to-/, ''), jDiffReport];
        |        });
        |  }]);
    """.stripMargin().trim()

    jdiffJs.write(jdiffJsContents)
}

task _githubPages_cloneGhPages << {
    final ghPagesRoot = new File("${rootProject.buildDir}/gh-pages/${rootProject.name}")

    if (!ghPagesRoot.isDirectory()) {
        Grgit.clone(
            uri: githubPages.repoUri,
            dir: ghPagesRoot.path,
            refToCheckout: 'gh-pages')
    }
}
