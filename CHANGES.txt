1.0.4 - January 8, 2013
=======================
* WarmUps weren't being run for objects with no dependencies.

* Issue 33: Warm up errors were merely being logged. They now generate true exceptions. Any
exceptions thrown by warm up methods are wrapped in a single WarmUpException that is throw by
the LifecycleManager.start() method.

* Issue 32: Objects added to the lifecycle after LifecycleManager.start() was called were getting
warmed up in the Guice thread. This could cause deadlocks and other problems. Further, each object
would get warmed up independently. I've reworked this code so that post-start warm ups occur in
a separate thread and there is a small padding period so that multiple objects added near the same
time can get warmed up together.

1.0.3 - January 3, 2013
=======================
* Added a new scope, FineGrainedLazySingleton. Guice's default Singleton scope synchronizes
all object creation on a single lock (InternalInjectorCreator.class). It does this to avoid
deadlocks with circular dependencies. FineGrainedLazySingleton instead locks on the key
so that multiple singletons can be created concurrently. Circular dependencies are rare
so FineGrainedLazySingleton risks deadlocks in those situations for the benefit of better
concurrency.

* Made LifecycleManager more concurrent by removing the coarse syncs on the add methods.

1.0.2 - December 5, 2012
========================
* Integrated hierarchy graphing. See the wiki for details:
https://github.com/Netflix/governator/wiki/Grapher-Integration

* There's an edge case that results in a ClassNotFoundException when Governator
reflects on a class to find annotated methods. Governator now catches these and logs
an error instead of stopping the app.

1.0.1 - November 28, 2012
=========================
* Issue 27: Add support for auto binding Guice modules. Modules can now be marked
@AutoBindSingleton and they will get automatically installed.

* By default, @AutoBindSingleton binds to the class that has the annotation. You can
now set the value to any base class/interface that you want to bind to. You can bind to
generic base classes/interfaces by specifying the raw type (i.e.
@AutoBindSingleton(List.class) for List<String>).
